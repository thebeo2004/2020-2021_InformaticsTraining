//https://oj.vnoi.info/problem/qmax2
#include <bits/stdc++.h>

using namespace std;
#define ff(i , a , b) for(long long i = a; i <= int(b); i++)
#define REP(i , a, b) for(long i = a; i >= int(b); i--)
typedef long long ll;
const int MAXN = 4e5 + 7;
struct node
{
    int val;
    int lazy;
};
node SegTree[MAXN];
void downto(int pos)
{
    int x = SegTree[pos].lazy;
    SegTree[2*pos + 1].val += x;
    SegTree[2*pos + 1].lazy +=x;
    SegTree[2*pos + 2].lazy += x;
    SegTree[2*pos + 2].val += x;

    SegTree[pos].lazy = 0;
}
void Update(int l , int r , int low , int high , int pos , int val)
{
    if (low > r || high < l) return ;
    if (low >= l && high <= r)
    {
        SegTree[pos].val+= val;
        SegTree[pos].lazy += val;
        return;
    }
    downto(pos);
    int mid = (low+high)/2;
    Update(l , r , low , mid , 2*pos + 1 , val);
    Update(l , r , mid + 1 , high , 2*pos + 2,val);
    SegTree[pos].val = max(SegTree[2*pos + 2].val , SegTree[2*pos + 1].val);
}
int max_query(int l , int r , int low ,int high , int pos)
{
    if (low > r || high < l) return INT_MIN;
    if (low >= l && high <= r) return SegTree[pos].val;
    downto(pos);
    int mid = (low + high)/2;
    return max(max_query(l , r , low , mid , 2*pos + 1) , max_query(l , r , mid + 1 , high , 2*pos + 2));
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(nullptr);cout.tie(nullptr);
    int N , M;
    cin >> N >> M;
    while(M--)
    {
        int x , y , z , t;
        cin >> x;
        if (x == 0)
        {
            cin >> y >> z >> t;
            y-- ; z--;
            Update(y , z , 0 , N, 0 , t);
        }
        else
        {
            cin >> y >> z;
            cout << max_query(y - 1 , z - 1 , 0 , N , 0) << endl;
        }
    }


    return 0;
}

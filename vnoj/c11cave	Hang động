//https://oj.vnoi.info/problem/c11cave
#include <bits/stdc++.h>

using namespace std;
#define ff(i , a , b) for(long long i = a; i <= int(b); i++)
#define REP(i , a, b) for(long i = a; i >= int(b); i--)
typedef long long ll;
const int MAXN = 4e6 + 7;
pair<int , int> SegTree[MAXN];
pair<int , int> combination (const pair<int ,int> &l , const pair<int , int> &r)
{
    pair<int, int> tmp;
    tmp.first = l.first + r.first;
    tmp.second = l.second + r.second;
    return tmp;
}
void Update(int idx , int low , int high , int pos , int i)
{
    if (low == high)
    {
        if (i == 0) SegTree[pos].first++;
        else SegTree[pos].second++;
        return ;
    }
    int mid = (low+high)/2;
    if (idx <= mid) Update(idx , low , mid , 2*pos + 1 , i);
    else Update(idx , mid + 1 , high , 2*pos + 2 , i);
    SegTree[pos] = combination(SegTree[2*pos + 1] , SegTree[2*pos + 2]);
}
int Query(int l , int r , int low , int high , int pos , int i)
{
    if (low > r || high < l) return 0;
    if (low >= l && high <= r)
    {
        if (i == 0) return SegTree[pos].first;
        else return SegTree[pos].second;
    }
    int mid = (low + high)/2;
    return (Query(l , r , low , mid , 2*pos + 1 , i) + Query(l , r , mid + 1 , high , 2*pos + 2 , i));
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(nullptr);cout.tie(nullptr);
    int N , H;
    cin >> N >> H;
    vector<int> v(N);
    ff(i , 0 , N - 1) cin >> v[i];
    ff(i , 0 , N - 1)
    {
        if (i%2 == 0) Update(v[i] , 0 , H , 0 , 0);
        else Update(v[i] , 0 , H, 0 , 1);
    }
    int ans = INT_MAX , number = 0;
    ff(i , 1 , H)
    {
        int x = Query(i,H , 0 , H, 0 , 0);
        int y = Query(H - i + 1 , H , 0 ,H, 0 , 1);
        if( ans == (x+y)) number++;
        else if ((x+y) < ans)
        {
            ans = x + y;
            number = 1;
        }
    }
    cout << ans << " " << number;
    return 0;
}

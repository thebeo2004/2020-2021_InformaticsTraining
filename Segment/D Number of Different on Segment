//https://codeforces.com/edu/course/2/lesson/4/4/practice/contest/274684/problem/D
#include <bits/stdc++.h>
 
using namespace std;
 
#define ff(i , a, b) for (int i = a; i <= b; i++)
#define REP(i , a, b) for (int i = a; i >= b; i--)
 
typedef long long ll;
const ll MAXN = 1e6;
 
struct node
{
    vector<int> v = vector<int>(42);
};
 
node SegTree[MAXN];
vector<int> number;
 
node operator + (node l , node r)
{
    node value;
    ff(i , 1 , 40) value.v[i] = l.v[i] + r.v[i];
    return value;
}
 
void Construct_Tree(int pos , int low , int high)
{
    if (low==high)
    {
        SegTree[pos].v[number[low]] = 1;
        return;
    }
    int mid = (low+high)/2;
    Construct_Tree(2*pos + 1 , low , mid);
    Construct_Tree(2*pos + 2 , mid + 1 , high);
    SegTree[pos] = SegTree[2*pos+1] + SegTree[2*pos+2];
}
 
void Update(int idx , int val , int low , int high , int pos)
{
    if (low==high)
    {
        SegTree[pos].v[number[idx]] = 0;
        SegTree[pos].v[val] = 1;
        number[idx] = val;
        return;
    }
    int mid = (low+high)/2;
    if (idx <= mid) Update(idx , val , low , mid , 2*pos + 1);
    else Update(idx , val , mid + 1 , high , 2*pos + 2);
    SegTree[pos] = SegTree[2*pos+1] + SegTree[2*pos+2];
}
 
int Query(int val , int l , int r , int low , int high , int pos)
{
    if (l > high || low > r) return 0;
    if (low >= l && high <= r) return SegTree[pos].v[val];
    int mid = (low+high)/2;
    return (Query(val , l , r , low , mid , 2*pos + 1) +
            Query(val , l , r, mid + 1 , high , 2*pos + 2));
}
 
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
 
    int n , q;
    cin >> n >> q;
    ff(i , 1 , n)
    {
        int x;
        cin >> x;
        number.push_back(x);
    }
 
    Construct_Tree(0 , 0 , n - 1);
 
    while(q--)
    {
        int type , x, y;
        cin >> type >> x >> y;
        if (type == 2) Update(x - 1 , y , 0 , n - 1 , 0);
        else
        {
            int total = 0;
            ff(i , 1 , 40)
            {
                int sum = min(1 , Query(i , x - 1 , y - 1 , 0 , n - 1 , 0));
                total+=sum;
            }
            cout << total<< endl;
        }
    }
 
 
    return 0;
}

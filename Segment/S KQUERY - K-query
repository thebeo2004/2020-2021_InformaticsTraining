//https://codeforces.com/group/FLVn1Sc504/contest/274496/problem/S
#include <bits/stdc++.h>
 
using namespace std;
 
#define ff(i , a, b) for (int i = a; i <= b; i++)
#define REP(i , a, b) for (int i = a; i >= b; i--)
 
const int MAXN = 1e6;
 
struct OwO
{
    int id;
    int left;
    int right;
    int val;
};
 
OwO query[MAXN];
vector<pair<int , int>> v;
 
bool sort_vector(const pair<int , int> &a , const pair<int,int> &b)
{
    return (a.second > b.second);
}
bool sortbysec(const OwO &l , const OwO &r)
{
    return (l.val>r.val);
}
 
int SegTree[MAXN];
void Update(int idx , int low , int high , int pos)
{
    if (low==high)
    {
        SegTree[pos] = 1;
        return;
    }
    int mid = (low+high)/2;
    if (idx <= mid) Update(idx , low , mid , 2*pos + 1);
    else Update(idx , mid + 1 , high , 2*pos + 2);
    SegTree[pos] = SegTree[2*pos+1] + SegTree[2*pos+2];
}
 
int Sum_Query(int l , int r , int low , int high , int pos)
{
    if (high < l || low > r) return 0;
    if (low >= l && high <= r) return SegTree[pos];
    int mid = (low+high)/2;
    return (Sum_Query(l , r, low , mid , 2*pos + 1) +
            Sum_Query(l , r, mid + 1 , high , 2*pos + 2));
}
 
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
 
    ff(i , 0 , MAXN - 5) SegTree[i] = 0;
 
    int n;
    cin >> n;
    ff(i , 0 , n - 1)
    {
        int x;
        cin >> x;
        v.push_back(make_pair(i , x));
    }
    sort(v.begin() , v.end() , sort_vector);
 
    int q;
    cin >> q;
    ff(i , 0 , q - 1)
    {
        int l , r, value;
        cin >> l >> r >> value;
        query[i].id = i;
        query[i].left = l - 1;
        query[i].right = r -1;
        query[i].val = value;
    }
    sort(query , query + q , sortbysec);
    vector<int> storage(q);
 
    int pos = 0;
    ff(i , 0 , q - 1)
    {
        int x = query[i].val;
        while(v[pos].second > x)
        {
            Update(v[pos].first , 0 , n - 1 , 0);
            pos++;
        }
        int sum = Sum_Query(query[i].left , query[i].right , 0 , n - 1 , 0);
        storage[query[i].id] = sum;
    }
 
    ff(i , 0 , q-1) cout << storage[i] << endl;
 
    return 0;
}

#include <bits/stdc++.h>
 
using namespace std;
 
#define ff(i , a , b) for (int i = a; i <= b; i++)
#define REP(i , a, b) for (int i = a; i >= b; i--)
 
typedef long long ll;
const ll MAXN = 1e6;
 
vector<ll> v;
vector<ll> SegTree(MAXN);
 
void ConstructTree(int low , int high , int pos )
{
    if (low == high)
    {
        SegTree[pos] = v[low];
        return;
    }
    int mid = (low+high)/2;
    ConstructTree(low , mid , pos*2 + 1);
    ConstructTree(mid + 1 , high , pos*2 + 2);
    SegTree[pos] = min(SegTree[pos*2 + 1],SegTree[pos*2 + 2]);
}
 
void Update(int index , int value , int low , int high , int pos)
{
   if (low == high)
   {
       v[index] = value;
       SegTree[pos] = value;
       return;
   }
 
   int mid = (low+high)/2;
   if (index >= low && index <= mid)
   {
       Update(index , value , low , mid , 2*pos + 1);
   }
   else if (index > mid && index <= high)
   {
       Update(index , value , mid  + 1 , high , 2*pos + 2);
   }
   SegTree[pos] = min(SegTree[2*pos + 1],SegTree[2*pos + 2]);
}
 
ll Minium_Query(int l , int r , int low , int high , int pos)
{
    if (l > high || low > r) return INT_MAX;
    else if (l <= low && r >= high) return SegTree[pos];
 
    int mid = (low + high)/2;
 
    return min(Minium_Query(l , r, low , mid , 2*pos + 1),Minium_Query(l , r, mid + 1 , high , 2*pos + 2));
}
 
 
 
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
 
    int n , m;
    cin >> n >> m;
    ff(i , 0 , n - 1)
    {
        ll x;
        cin >> x;
        v.push_back(x);
    }
 
    ConstructTree(0 , n - 1 , 0);
 
    while(m--)
    {
         int a , b , c;
         cin >> a >> b >> c;
         if (a==1)
         {
             Update(b , c , 0 , n - 1 , 0);
         }
         else
         {
             cout << Minium_Query(b, c - 1 , 0 , n - 1 , 0) << endl;
         }
    }
 
    return 0;
}
